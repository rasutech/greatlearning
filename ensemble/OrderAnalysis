import pandas as pd
import matplotlib.pyplot as plt

# ... (rest of the code remains the same until the plotting sections)

# 1. Volumetric Throughput by Received Month with Table View
plt.figure(figsize=(10, 8))  # Adjust figure size to accommodate the table

# Bar chart
ax = received_counts.plot(kind='bar', color='skyblue', label='Received')

# Add count labels
for bar in ax.patches:
    plt.annotate(format(bar.get_height(), '.0f'), 
                 (bar.get_x() + bar.get_width() / 2, bar.get_height()), 
                 ha='center', va='center', xytext=(0, 5), textcoords='offset points')

# Table view
table_data = received_counts.reset_index()
table_data.columns = ['Month', 'Received Count']
table = plt.table(cellText=table_data.values, colLabels=table_data.columns, loc='top')
table.auto_set_font_size(False)
table.set_fontsize(8)  # Adjust font size as needed
table.scale(1, 1.5)  # Adjust table height

plt.title('Volumetric Throughput of Orders by Received Month')
plt.xlabel('Month')
plt.ylabel('Number of Orders')
plt.legend()
plt.subplots_adjust(left=0.2, top=0.8)  # Adjust subplot spacing
plt.show()

# 2. Volumetric Throughput by Completed Month with Table View
plt.figure(figsize=(10, 8))

# Bar chart
ax = completed_counts.plot(kind='bar', color='green', label='Completed')

# Add count labels
for bar in ax.patches:
    plt.annotate(format(bar.get_height(), '.0f'), 
                 (bar.get_x() + bar.get_width() / 2, bar.get_height()), 
                 ha='center', va='center', xytext=(0, 5), textcoords='offset points')

# Table view
table_data = completed_counts.reset_index()
table_data.columns = ['Month', 'Completed Count']
table = plt.table(cellText=table_data.values, colLabels=table_data.columns, loc='top')
table.auto_set_font_size(False)
table.set_fontsize(8)
table.scale(1, 1.5) 

plt.title('Volumetric Throughput of Orders by Completed Month')
plt.xlabel('Month')
plt.ylabel('Number of Orders')
plt.legend()
plt.subplots_adjust(left=0.2, top=0.8)
plt.show()

# 3. Combined Bar Chart with Table View
plt.figure(figsize=(10, 8))

# Bar chart
ax = combined_counts.plot(kind='bar', rot=0)

# Add count labels
for bar_group in ax.containers:
    for bar in bar_group:
        plt.annotate(format(bar.get_height(), '.0f'), 
                     (bar.get_x() + bar.get_width() / 2, bar.get_height()), 
                     ha='center', va='center', xytext=(0, 5), textcoords='offset points')

# Table view
table = plt.table(cellText=combined_counts.values, colLabels=combined_counts.columns, loc='top')
table.auto_set_font_size(False)
table.set_fontsize(8)
table.scale(1, 1.5)

plt.title('Volumetric Throughput - Received vs Completed')
plt.xlabel('Month')
plt.ylabel('Number of Orders')
plt.legend()
plt.subplots_adjust(left=0.2, top=0.8)
plt.show()

# 4. Stacked Bar Chart with Table View (Modified)
def plot_stacked_bar(category):
    filtered_df = df[df['order_category'] == category]
    pivot_df = filtered_df.pivot_table(index='received_month', columns='order_type', aggfunc='size', fill_value=0)

    plt.figure(figsize=(10, 8))

    # Bar chart
    ax = pivot_df.plot(kind='bar', stacked=True, rot=0)

    # Add count labels with adjustments
    for bar_group in ax.containers:
        for bar in bar_group:
            height = bar.get_height()
            label_text = format(height, '.0f')

            if height > 10:
                plt.annotate(label_text, 
                             (bar.get_x() + bar.get_width() / 2, bar.get_y() + bar.get_height() / 2), 
                             ha='center', va='center',
                             xytext=(0, 5), 
                             textcoords='offset points',
                             rotation=45, 
                             fontsize=8)

    # Table view
    table = plt.table(cellText=pivot_df.values, colLabels=pivot_df.columns, loc='top')
    table.auto_set_font_size(False)
    table.set_fontsize(8)
    table.scale(1, 1.5)

    plt.title(f'Stacked Bar Chart by Order Type for {category}')
    plt.xlabel('Month')
    plt.ylabel('Number of Orders')
    plt.legend()
    plt.subplots_adjust(left=0.2, top=0.8)
    plt.show()

# ... (rest of the code for dynamic plotting remains the same)
